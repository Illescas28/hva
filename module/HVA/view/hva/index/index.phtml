<?php /*
<br>
<br>

<a class="waves-effect waves-light btn">Stuff</a>
<a class="waves-effect waves-light btn"><i class="mdi-file-cloud left"></i>button</a>
<a class="waves-effect waves-light btn"><i class="mdi-file-cloud right"></i>button</a>

<div class="fixed-action-btn" style="bottom: 45px; right: 24px;">
    <a class="btn-floating btn-large red">
        <i class="large mdi-editor-mode-edit"></i>
    </a>
    <ul>
        <li><a class="btn-floating red"><i class="large mdi-editor-insert-chart"></i></a></li>
        <li><a class="btn-floating yellow darken-1"><i class="large mdi-editor-format-quote"></i></a></li>
        <li><a class="btn-floating green"><i class="large mdi-editor-publish"></i></a></li>
        <li><a class="btn-floating blue"><i class="large mdi-editor-attach-file"></i></a></li>
    </ul>
</div>
*/ ?>
<div class="test"><p>Hola</p></div>
<br>
<br>
<!-- Edit Modal Structure -->
<div id="edit-modal-cargoconsulta-<?php echo $cargoconsultaEntity->getIdcargoconsulta()?>" class="modal ">
<div class="modal-content">
    <?php $cargoconsultaForm->setAttribute('action', '/paciente/ver/'.$pacienteEntity->getIdpaciente());?>
    <?php $cargoconsultaForm->setAttribute('class', 'hva-form');?>
    <?php $cargoconsultaForm->prepare();?>
    <?php echo $this->form()->openTag($cargoconsultaForm); ?>
    <div class="col s4">
        <div class="input-field">
            <?php echo $this->formHidden($cargoconsultaForm->get('idconsulta')->setValue($cargoconsultaForm->getIdconsulta())); ?>
        </div>
        <div class="input-field">
            <?php echo $this->formSelect($cargoconsultaForm->get('idmedico')); ?>
            <?php $showError=$this->formElementErrors($cargoconsultaForm->get('idmedico'));
            if(!empty($showError)):
                ?>
                <div class="center-align col" style="color: #e57373">
                    <i class="mdi-content-report prefix"></i>
                </div>
                <div class="center-align col s11 offset-s1" style="color: #e57373">
                    <?php
                    echo $showError;
                    ?>
                </div>
            <?php  endif;?>
        </div>
    </div>
    <div class="col s4 offset-s4">
        <div class="input-field">
            <?php echo $this->formSelect($consultaForm->get('idconsultorio')); ?>
            <?php $showError=$this->formElementErrors($consultaForm->get('idconsultorio'));
            if(!empty($showError)):
                ?>
                <div class="center-align col" style="color: #e57373">
                    <i class="mdi-content-report prefix"></i>
                </div>
                <div class="center-align col s11 offset-s1" style="color: #e57373">
                    <?php
                    echo $showError;
                    ?>
                </div>
            <?php  endif;?>
        </div>
    </div>
    <div class="col s12">
        <div class="input-field">
            <?php echo $this->formText($consultaForm->get('consulta_fechaadmision')); ?>
            <?php echo $this->formLabel($consultaForm->get('consulta_fechaadmision')); ?>
            <?php $showError=$this->formElementErrors($consultaForm->get('consulta_fechaadmision'));
            if(!empty($showError)):
                ?>
                <div class="center-align col" style="color: #e57373">
                    <i class="mdi-content-report prefix"></i>
                </div>
                <div class="center-align col s11 offset-s1" style="color: #e57373">
                    <?php
                    echo $showError;
                    ?>
                </div>
            <?php  endif;?>
        </div>
    </div>
    <div class="col s6">
        <div class="input-field">
            <?php echo $this->formText($consultaForm->get('consulta_diagnostico')); ?>
            <?php echo $this->formLabel($consultaForm->get('consulta_diagnostico')); ?>
            <?php $showError=$this->formElementErrors($consultaForm->get('consulta_diagnostico'));
            if(!empty($showError)):
                ?>
                <div class="center-align col" style="color: #e57373">
                    <i class="mdi-content-report prefix"></i>
                </div>
                <div class="center-align col s11 offset-s1" style="color: #e57373">
                    <?php
                    echo $showError;
                    ?>
                </div>
            <?php  endif;?>
        </div>
    </div>
    <div class="col s6">
        <div class="input-field">
            <?php echo $this->formText($consultaForm->get('consulta_observaciones')); ?>
            <?php echo $this->formLabel($consultaForm->get('consulta_observaciones')); ?>
            <?php $showError=$this->formElementErrors($consultaForm->get('consulta_observaciones'));
            if(!empty($showError)):
                ?>
                <div class="center-align col" style="color: #e57373">
                    <i class="mdi-content-report prefix"></i>
                </div>
                <div class="center-align col s11 offset-s1" style="color: #e57373">
                    <?php
                    echo $showError;
                    ?>
                </div>
            <?php  endif;?>
        </div>
    </div>
    <br>
    <br>
    <div class="right col s4">
        <button style="width: 100%; height: 45px; margin-top: 20px;"class="btn waves-effect waves-light" type="submit" name="action">Guardar
            <i class="mdi-content-save left"></i>
        </button>
    </div>
    <?php echo $this->form()->closeTag(); ?>
</div>
<!-- End Edit Modal Structure -->
<style>
    .test{
        color:red;
    }
</style>
<script>
    if($('div.test').has('p')){
        alert("Hola");
    }
    $('#myForm :input');
    /**
     *  http://librojquery.com/#obtener-el-material-de-aprendizaje
     *
        console.log() //para enviar y registrar mensajes generales;
        console.dir() //para registrar un objeto y visualizar sus propiedades;
        console.warn() //para registrar mensajes de alerta;
        console.error() //para registrar mensajes de error.
     */
    /**
        Los métodos que pueden ser llamados desde el objeto jQuery, serán referenciados como $.fn.nombreDelMetodo.
        Los métodos que existen en el espacio de nombres (en inglés namespace) de jQuery
        pero que no pueden ser llamados desde el objeto jQuery serán referenciados como $.nombreDelMetodo.
     */

    // 2 Conceptos Básicos de JavaScript
    // 2.2 Sintaxis Básica
    // Comprensión de declaraciones, nombres de variables, espacios en blanco, y otras sintaxis básicas de JavaScript.
    // Declaración simple de variable
    var foo1 = 'hola mundo';

    // Los espacios en blanco no tienen valor fuera de las comillas
    var foo2 =         'hola mundo';

    // Los paréntesis indican prioridad

    // 2 * 3 + 5;    // es igual a 11, la multiplicación ocurre primero
    // 2 * (3 + 5);  // es igual a 16, por los paréntesis, la suma ocurre primero

    // La tabulación mejora la lectura del código, pero no posee ningún significado especial

    var foo3 = function() {
        console.log('hola');
    };

    // 2.3 Operadores
    // 2.3.1 Operadores Básicos
    // Los operadores básicos permiten manipular valores.
    // Concatenación

    var foo4 = 'hola';
    var bar = 'mundo';

    console.log(foo4 + ' ' + bar); // la consola de depuración muestra 'hola mundo'

    // Multiplicación y división
    // 2 * 3;
    // 2 / 3;

    // Incrementación y decrementación

    var i = 1;

    var j = ++i;  // incrementación previa:  j es igual a 2; i es igual a 2
    var k = i++;  // incrementación posterior: k es igual a 2; i es igual a 3
    console.log(i);
    console.log(j);
    console.log(k);

    /**
     Determinar el tipo en diferentes variables

     var myFunction = function() {
     console.log('hola');
     };

     var myObject = {
     foo : 'bar'
     };

     var myArray = [ 'a', 'b', 'c' ];

     var myString = 'hola';

     var myNumber = 3;

     typeof myFunction;   // devuelve 'function'
     typeof myObject;     // devuelve 'object'
     typeof myArray;      // devuelve 'object' -- tenga cuidado
     typeof myString;     // devuelve 'string'
     typeof myNumber;     // devuelve 'number'

     typeof null;         // devuelve 'object' -- tenga cuidado


     if (myArray.push && myArray.slice && myArray.join) {
     // probablemente sea un vector
     // (este estilo es llamado, en inglés, "duck typing")
     }

     if (Object.prototype.toString.call(myArray) === '[object Array]') {
     // definitivamente es un vector;
     // esta es considerada la forma más robusta
     // de determinar si un valor es un vector.
     }
     */

    /* solución: “clausurar” el valor de i dentro de createFunction */
    var createFunction = function(i) {
        return function() {
            alert(i);
        };
    };

    for (var i = 0; i < 5; i++) {
        $('<p>hacer click</p>').appendTo('body').click(createFunction(i));
    }
</script>